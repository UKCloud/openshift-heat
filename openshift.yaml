heat_template_version: 2016-04-08

parameters:
  time:
    type: string
    description: epoch time used to cause ansible to run on every update
  flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    default: "rhel-atomic-cloud-7.3"
    constraints:
      - custom_constraint: glance.image
  key_name:
    type: string
    description: SSH Key Pair
    default: "venv-mac"
    constraints:
      - custom_constraint: nova.keypair
  master_scale:
    type: number
    description: Number of master nodes to deploy
    default: 3
  worker_scale:
    type: number
    description: Number of worker nodes to deploy
    default: 2
  haproxy_scale:
    type: number
    description: Number of HAProxy nodes to deploy
    default: 2
  rhn_user:
    type: string
    label: rhn username
    description: Name of the rhn user.
  rhn_password:
    type: string
    label: RHN user password
    description: rhn user password
    hidden: true
  domain_suffix:
    type: string
    description: domain suffix for OpenShift
    default: customer1.openshift.ukcloud.com
  haproxy_ports:
    type: comma_delimited_list
    description: ports to open for external access to haproxy servers
    default: "80,443,8443"
  registry_volume_size:
    type: string
    description: Size of the OpenStack volume that backs the OpenShift registry
    default: 100
  openshift_openstack_username:
    type: string
    description: OpenShift username for cinder integration
  openshift_openstack_password:
    type: string
    description: OpenShift password for cinder integration
  os_auth_url:
    type: string
    description: OpenStack auth URL
  os_tenant_id:
    type: string
    description: OpenStack tenant ID
  os_tenant_name:
    type: string
    description: OpenStack tenant name
  os_region:
    type: string
    description: OpenStack Region

resources:
  InternetGW:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: Internet }
      name: InternetGW

  internet_gw:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: InternetGW }
      subnet: { get_attr: [ internal_net, subnet ] }

  internal_net:
    type: network.yaml
    properties:
      net_name: internal_net
      allocation_pools: [{"start": "10.1.1.2", "end": "10.1.1.100"}]
      cidr: "10.1.1.0/24"
      dns: [ "10.1.1.101", "8.8.8.8" ]
      gateway: "10.1.1.1"

  bastion_port:
    type: OS::Neutron::Port
    properties:
      network: { get_attr: [ internal_net, network ] }
      fixed_ips: [{ subnet: { get_attr: [ internal_net, subnet ] }, ip_address: 10.1.1.101 }]
      security_groups:
        - default
        - { get_resource: ssh_secgroup }

  haproxy_port:
    type: OS::Neutron::Port
    properties:
      network: { get_attr: [ internal_net, network ] }
      fixed_ips:
      - subnet_id: { get_attr: [ internal_net, subnet ] }
      security_groups:
        - default
        - { get_resource: openshift_secgroup }

  bastion_floating_ip:
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: "Internet"

  bastion_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: bastion_floating_ip }
      port_id: { get_resource: bastion_port }

  haproxy_floating_ip:
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: "Internet"

  haproxy_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: haproxy_floating_ip }
      port_id: { get_resource: haproxy_port }

  ssh_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22

  openshift_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        repeat:
          for_each:
            <%port%>: { get_param: haproxy_ports }
          template:
            protocol: tcp
            port_range_min: <%port%>
            port_range_max: <%port%>

#  # Install, configure and enable the Heat configuration agent
#  config_agent:
#    type: collect-config-setup/install_config_agent_centos_yum.yaml

  install_config_agent_yum:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: 
        str_replace:
          params:
            __rhn_username__: { get_param: rhn_user }
            __rhn_password__: { get_param: rhn_password }
            __dns_ip__: 10.1.1.101
          template: {get_file: files/install_config_agent_yum.sh}

  configure_config_agent:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        get_file: files/configure_config_agent.sh

  start_config_agent:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: files/start_config_agent.sh}

  install_config_agent:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: install_config_agent_yum}
      - config: {get_resource: configure_config_agent}
      - config: {get_resource: start_config_agent}

  bastion_host:
    type: OS::Nova::Server
    depends_on: [ internal_net, bastion_port ]
    properties:
      name: bastion_host
      flavor: { get_param: flavor }
      image: "rhel-7-LTS" 
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: bastion_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: install_config_agent }

  haproxy_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ internal_net, bastion_host, haproxy_port ]
    properties:
      count: { get_param: haproxy_scale }
      resource_def:
        type: server_with_port.yaml
        properties:
          server_name: haproxy-%index%
          flavor: { get_param: flavor }
          image: "rhel-7-LTS"
          key_name: { get_param: key_name }
          rhn_user: { get_param: rhn_user }
          rhn_password: { get_param: rhn_password }
          network: { get_attr: [ internal_net, network  ] }
          internal_vip: { get_attr: [ haproxy_port, fixed_ips, 0, ip_address ] } 
          sec_groups:
            - default
            - { get_resource: openshift_secgroup }

  master_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ internal_net, bastion_host ]
    properties:
      count: { get_param: master_scale }
      resource_def:
        type: server.yaml
        properties:
          server_name: master-%index%
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          rhn_user: { get_param: rhn_user }
          rhn_password: { get_param: rhn_password }
          networks:
            - network: { get_attr: [ internal_net, network ] }

  worker_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ internal_net, bastion_host ]
    properties:
      count: { get_param: worker_scale }
      resource_def:
        type: server.yaml
        properties:
          server_name: worker-%index%
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          rhn_user: { get_param: rhn_user }
          rhn_password: { get_param: rhn_password }
          networks:
            - network: { get_attr: [ internal_net, network ] }

  setup_host_file:
    type: OS::Heat::SoftwareConfig
    depends_on: [ worker_group, master_group, haproxy_group, bastion_host ]
    properties:
      group: ansible
      config:
        str_replace:
          params:
            __haproxy_details__: { get_attr: [ haproxy_group, host_entry ] }
            __worker_details__: { get_attr: [ worker_group, host_entry ] }
            __master_details__: { get_attr: [ master_group, host_entry ] }
            __dns_ip__: 10.1.1.101
            __time__: { get_param: time }
            __haproxy_vip__: { get_attr: [ haproxy_port, fixed_ips, 0, ip_address ] }
            __domain_suffix__: { get_param: domain_suffix }
            __registry_volume__: { get_resource: openshift_registry_volume }
            __openshift_openstack_username__: { get_param: openshift_openstack_username }
            __openshift_openstack_password__: { get_param: openshift_openstack_password }
            __openstack_auth_url__: { get_param: os_auth_url }
            __openstack_tenant_id__: { get_param: os_tenant_id }
            __openstack_tenant_name__: { get_param: os_tenant_name }
            __openstack_region__: { get_param: os_region }
            __registry_volume_size__: { get_param: registry_volume_size }
          template: { get_file: 'files/setup_bastian.yaml' }
      outputs:
      - name: result

  deployment_host_file:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: CFN_SIGNAL
      config: 
        get_resource: setup_host_file
      server:
        get_resource: bastion_host

  openshift_registry_volume:
    type: OS::Cinder::Volume
    properties:
      name: openshift_registry_volume
      read_only: false
      size: { get_param: registry_volume_size }
      volume_type: TIER2

outputs:
  bastion_ip:
    description: External IP for connection to jump box.
    value: { get_attr: [  bastion_floating_ip, floating_ip_address ] }
  haproxy_external_ip:
    description: External IP for haproxy..
    value: { get_attr: [  haproxy_floating_ip, floating_ip_address ] }
  host_file:
    description: host file contents
    value: 
      list_join: [ ', ',  { get_attr: [ worker_group, host_entry ] }, { get_attr: [ haproxy_group, host_entry ] }, { get_attr: [ master_group, host_entry ] } ]
