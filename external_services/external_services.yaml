heat_template_version: 2016-10-14

parameters:
  external_services_json:
    type: json
    description: Configuration values for external services in a json array
  index:
    type: string
  internal_network:
    type: string
    description: neutron network name to attach port on

resources:
  external_service_security_group_rule:
    type: OS::Neutron::SecurityGroupRule
    condition: sec_rule_create
    properties:
      security_group: external_service_sg
      protocol: { get_param: [ external_services_json, { get_param: index}, proto ]}
      remote_ip_prefix: { get_param: [ external_services_json, { get_param: index}, allowed_sources ] }
      ethertype: IPv4
      direction: ingress
      port_range_max: { get_param: [ external_services_json, { get_param: index}, port ] }
      port_range_min: { get_param: [ external_services_json, { get_param: index}, port ] }

  service_floating_ip:
    type: OS::Neutron::FloatingIP
    condition: port_ip_create
    properties:
      floating_network: { get_param: [ external_services_json, { get_param: index }, floating_network ] }

  service_port:
    type: OS::Neutron::Port
    condition: port_ip_create
    properties:
      name:
        str_replace:
          template: external_service_port_index
          params:
            index: { get_param: index }
      network: { get_param: internal_network }
      fixed_ips:
        [ip_address: { get_param: [ external_services_json, { get_param: index }, service_ip ] }]

  service_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    condition: port_ip_create
    depends_on: [ service_floating_ip, service_port ]
    properties:
      floatingip_id: { get_resource: service_floating_ip }
      port_id: { get_resource: service_port }

conditions:
  port_ip_create:
    not:
      equals:
      - get_param: [ external_services_json, { get_param: index }, port_ip_deploy ]
      - false

  sec_rule_create:
    not:
      equals:
      - get_param: [ external_services_json, { get_param: index }, sec_rule_deploy ]
      - false

outputs:
  service_floating_ip:
    condition: port_ip_create
    value: { get_attr: [ service_floating_ip, floating_ip_address ] }
  service_internal_ip:
    condition: port_ip_create
    value: { get_attr: [ service_port, fixed_ips, 0, ip_address ] }
