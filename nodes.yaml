heat_template_version: 2016-04-08

parameters:
  haproxy_floating_ip:
     type: string
  node_type:
    type: string
    description: Type of node to deploy in [master, worker]
    constraints:
      - allowed_values: 
        - master
        - worker
  node_flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.medium
    constraints:
      - custom_constraint: nova.flavor
  haproxy_flavor:
    type: string
    description: Flavor for the server to be created
    default: t1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    default: "rhel-atomic-cloud-7.4.2-8"
    constraints:
      - custom_constraint: glance.image
  key_name:
    type: string
    description: SSH Key Pair
    default: "venv-mac"
    constraints:
      - custom_constraint: nova.keypair
  node_scale:
    type: number
    description: Number of nodes to deploy
    default: 3
  haproxy_scale:
    type: number
    description: Number of HAProxy nodes to deploy
    default: 2
  rhn_orgid:
    type: string
    label: rhn activation org
    description: Name of the rhn activation org
  rhn_activationkey:
    type: string
    label: RHN activation key
    description: rhn activation key
    hidden: true
  local_domain_suffix:
    type: string
    description: domain suffix for local DNS for OpenShift
    default: openstacklocal
  internal_network:
    type: string
    description: network on which to deploy the cluster
  internal_network_subnet:
    type: string
    description: subnet of network to attach to
  cluster_security_group:
    type: string
    description: Security group for cluster
  loadbalancer_security_group:
    type: string
    description: Security group for loadbalancer

resources:
  name_nonce:
    type: OS::Heat::RandomString
    properties:
      length: 4
      sequence: lowercase

  haproxy_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: internal_network }
      fixed_ips:
      - subnet_id: { get_param: internal_network_subnet }
      security_groups:
        - { get_param: cluster_security_group }
        - { get_param: loadbalancer_security_group }

  haproxy_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: haproxy_floating_ip }
      port_id: { get_resource: haproxy_port }

  haproxy-servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name: haproxy-servergroup
      policies: [ 'anti-affinity' ]

  haproxy_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ haproxy_port ]
    properties:
      count: { get_param: haproxy_scale }
      resource_def:
        type: server_with_port.yaml
        properties:
          server_name: 
            str_replace:
              template: haproxy-nonce-%index%.suffix
              params:
                suffix: { get_param: local_domain_suffix }
                nonce: { get_resource: name_nonce }
          flavor: { get_param: haproxy_flavor }
          image: "rhel-7-LTS"
          key_name: { get_param: key_name }
          rhn_orgid: { get_param: rhn_orgid }
          rhn_activationkey: { get_param: rhn_activationkey }
          port_network: { get_param: internal_network }
          internal_vip: { get_attr: [ haproxy_port, fixed_ips, 0, ip_address ] } 
          sec_groups:
            - { get_param: cluster_security_group }
            - { get_param: loadbalancer_security_group }
          server_group: { get_resource: haproxy-servergroup }

  node-servergroup:
    type: OS::Nova::ServerGroup
    properties:
      name: 
        str_replace:
          template: nodetype-servergroup
          params:
            nodetype: { get_param: node_type }
      policies: [ 'anti-affinity' ]

  node_group:
    type: OS::Heat::ResourceGroup
    depends_on: []
    properties:
      count: { get_param: node_scale }
      resource_def:
        type: server_atomic.yaml
        properties:
          server_name: 
            str_replace:
              template: nodetype-nonce-%index%.suffix
              params:
                nodetype: { get_param: node_type }
                suffix: { get_param: local_domain_suffix }
                nonce: { get_resource: name_nonce }
          flavor: { get_param: node_flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          rhn_orgid: { get_param: rhn_orgid }
          rhn_activationkey: { get_param: rhn_activationkey }
          port_network: { get_param: internal_network }
          sec_groups:
            - { get_param: cluster_security_group }
          storage_setup: |
            GROWPART=true
            ROOT_SIZE=41G
            DATA_SIZE=12G
          server_group: { get_resource: node-servergroup }

outputs:
  haproxy_external_ip:
    description: External IP for haproxy..
    value: { get_param: haproxy_floating_ip }
  haproxy_internal_vip:
    description: Internal IP for haproxy..
    value: { get_attr: [ haproxy_port, fixed_ips, 0, ip_address ] }
  node_list:
    description: host file contents
    value: { get_attr: [ node_group, host_entry ] }
  haproxy_list:
    description: host file contents
    value: { get_attr: [ haproxy_group, host_entry ] } 
  host_file:
    description: host file contents
    value: 
      list_join: [ ', ',  { get_attr: [ haproxy_group, host_entry ] }, { get_attr: [ node_group, host_entry ] } ]

