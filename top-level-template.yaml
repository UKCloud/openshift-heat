heat_template_version: 2016-10-14

parameters:
  key_name:
    type: string
    description: SSH Key Pair
    default: "venv-mac"
    constraints:
      - custom_constraint: nova.keypair
  openshift_openstack_username:
    type: string
    description: OpenShift username for cinder integration
  openshift_openstack_password:
    type: string
    description: OpenShift password for cinder integration
    hidden: true
  os_auth_url:
    type: string
    description: OpenStack auth URL
  os_tenant_id:
    type: string
    description: OpenStack tenant ID
  os_tenant_name:
    type: string
    description: OpenStack tenant name
  os_region:
    type: string
    description: OpenStack Region
  os_domain_id:
    type: string
    description: Openstack domain ID
  time:
    type: string
    description: epoch time used to cause ansible to run on every update
  domain_suffix:
    type: string
    description: domain suffix for OpenShift
    default: customer1.openshift.ukcloud.com
  local_domain_suffix:
    type: string
    description: domain suffix for local DNS for OpenShift
    default: openstacklocal
  controlplane_floating_ip:
    type: string
    description: floating ip for the control plane
  dataplane_floating_ip:
    type: string
    description: floating ip for the internet facing data plane
  s3_access_key:
    type: string
    description: s3 access key for registry backend
  s3_secret_key:
    type: string
    description: s3 secret key for registry backend 
  s3_region_endpoint:
    type: string
    description: s3 region end point for registry backend
  s3_bucket_name:
    type: string
    description: s3 bucket for registry backend - must exist
  openshift_version:
    type: string
    description: OpenShift version to deploy
    default: 3.7
  get_certificates:
    type: boolean
    description: download certificates with certbot during install
    default: false
  do_upgrades:
    type: boolean
    description: Whether to perform OS package upgrades as part of Ansible deployment
    default: true
  install_logging:
    type: boolean
    description: Whether to deploy the aggregated logging stack into the environment
    default: false
  logging_cluster_size:
    type: number
    description: Size of the ES cluster to deploy if logging deployed with install_logging
    default: 1
  ocp_branding:
    type: boolean
    description: Whether to add custom branding to ocp console
    default: false
  ocp_branding_url:
    type: string
    description: External URL for the CSS specifying the branding
    default: ""
  worker_small_scale:
    type: number
    description: Number of worker nodes to deploy
    default: 0
  worker_medium_scale:
    type: number
    description: Number of worker nodes to deploy
    default: 0
  worker_large_scale:
    type: number
    description: Number of worker nodes to deploy
    default: 0
  infra_scale:
    type: number
    description: Number of infra nodes to deploy
    default: 2
  multinetwork:
    type: boolean
    description: Whether to deploy a secondary external network
  deploy_extra_gateway:
    type: boolean
    description: Whether to deploy an extra gateway for a VRF for example
  external_network_cp:
    type: string
    description: The external network the control plane will use
    default: "Internet"
  external_dns:
    type: comma_delimited_list
    description: The dns server for the control plane external network
    default: [ "8.8.8.8" ]
  set_node_routes:
    type: boolean
    description: Whether to deploy extra static routes to all nodes
    default: false
  node_routes:
    type: json
    description: The routes to deploy if set_node_routes is true
    default: []
  control_plane_allowed_sources:
    type: comma_delimited_list
    description: ip addresses that inbound connectivity can come from
    default: [ "0.0.0.0/0" ]
  monitoring_allowed_sources:
    type: comma_delimited_list
    description: ip addresses that inbound connectivity can come from for monitoring
    default: [ "0.0.0.0/32" ]
  data_plane_allowed_sources:
    type: comma_delimited_list
    description: ip addresses that inbound connectivity can come from
    default: [ "0.0.0.0/0" ]
  bastion_allowed_sources:
    type: comma_delimited_list
    description: ip addresses that can SSH to bastions
    default: [ "0.0.0.0/0" ]
  network_config:
    type: json
    description: Network configuration for internal network
    default: 
      allocation_pool: [{"start": "10.2.1.2", "end": "10.2.1.100"}]
      cidr: "10.2.1.0/24"
      dns: [ "8.8.4.4" ]
      gateway: "10.2.1.254"
      bastion_ip: "10.2.1.101"
      service_subnet: "10.2.1.240/29"
  sso_config:
    type: json
    description: SSO configuration for OpenID integration
    default:
      client_id: "<client ID>"
      client_secret: "<client secret>"
      urls: '{"authorize": "<authorize_url>","token": "<token_url>","userInfo": "<userinfo_url>","logout": "<logout_url>"}'
  external_services_config:
    type: json
    description: config to be used for external service deployment. See environment example for syntax.
    default: ""
  registry_details:
    type: json
    description: Registry url, user and password for authenticated registry
    default:
      registry_url: "<registry_url>"
      registry_user: "<registry_user>"
      registry_password: "<registry_password>"
  ansible_branch:
    type: string
    description: Ansible branch that will be pulled on bastion deployment.
    default: master
  controlplane_ip:
    type: string
    description: Floating IP address associated with controlplane port
  dataplane_ip:
    type: string
    description: Floating IP address associated with dataplane port
  neustar_ultradns_username:
    type: string
    description: Neustar UltraDNS username to allow authentication to UltraDNS API
  neustar_ultradns_password:
    type: string
    description: Neustar UltraDNS password to allow authentication to UltraDNS API
  slack_webhook_url_acme_sh:
    type: string
    description: Slack Webhook URL for acme.sh notifications

resources:
  internal_network:
    type: OS::Heat::Stack
    properties:
      template: { get_file: network.yaml }
      parameters:
        allocation_pools: { get_param: [ network_config, allocation_pool ] }
        cidr: { get_param: [ network_config, cidr ] }
        dns: { get_param: [ network_config, dns ] }
        external_network: { get_param: external_network_cp }
        gateway: { get_param: [ network_config, gateway ] }

  security_groups:
    type: OS::Heat::Stack
    properties:
      template: { get_file: security_groups.yaml }
      parameters:
        control_plane_ports: "443,8443"
        data_plane_ports: "80,443"
        control_plane_sources: { get_param: control_plane_allowed_sources }
        data_plane_sources: { get_param: data_plane_allowed_sources }
        bastion_sources: { get_param: bastion_allowed_sources }
        monitoring_sources: { get_param: monitoring_allowed_sources }

  external_services_infra:
    type: OS::Heat::ResourceGroup
    depends_on: [ internal_network, security_groups ]
    condition: external_service
    properties:
      index_var: index_num
      count:
        yaql:
          expression: $.data.array.len()
          data:
            array: { get_param: [ external_services_config ] }
      resource_def:
        type: external_services/external_services.yaml
        properties:
          external_services_json: { get_param: [ external_services_config ] }
          index: index_num
          internal_network: { get_attr: [ internal_network, outputs, network ] }

  server_groups:
    type: OS::Heat::Stack
    properties:
      template: { get_file: server_groups.yaml }

  squid_vip:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: squidvip.yaml }
      parameters:
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        security_groups:
          - { get_attr: [ security_groups, outputs, control_plane_lb_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, control_plane_security_group ] }
          - { get_attr: [ security_groups, outputs, monitoring_security_group ] }
          - { get_attr: [ security_groups, outputs, dns_internet_security_group ] }
          - { get_attr: [ security_groups, outputs, dns_forwarder_security_group ] }
          - { get_attr: [ security_groups, outputs, vrrp_controlplane_security_group ] }
          - { get_attr: [ security_groups, outputs, proxy_security_group ] }
          - { get_attr: [ security_groups, outputs, controlplane_certbot_security_group ] }

  control_plane_lb:
    type: OS::Heat::Stack
    depends_on: [ squid_vip, internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: loadbalancers.yaml }
      parameters:
        haproxy_floating_ip: { get_param: controlplane_floating_ip }
        squid_vip: { get_attr: [ squid_vip, outputs, squid_internal_vip ] }
        key_name: { get_param: key_name }
        scale: 2
        purpose_ident: cp
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        server_group: { get_attr: [server_groups, outputs, loadbalancers-servergroup] }
        security_groups:
          - { get_attr: [ security_groups, outputs, control_plane_lb_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, control_plane_security_group ] }
          - { get_attr: [ security_groups, outputs, monitoring_security_group ] }
          - { get_attr: [ security_groups, outputs, dns_internet_security_group ] }
          - { get_attr: [ security_groups, outputs, dns_forwarder_security_group ] }
          - { get_attr: [ security_groups, outputs, vrrp_controlplane_security_group ] }
          - { get_attr: [ security_groups, outputs, proxy_security_group ] }
          - { get_attr: [ security_groups, outputs, controlplane_certbot_security_group ] }
      
  master_nodes_deployment:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: node_group.yaml }
      parameters:
        node_type: master
        node_flavor: ocp.m1.medium
        key_name: { get_param: key_name }
        node_scale: 3
        purpose_ident:
        storage_setup: |
          GROWPART=true
          ROOT_SIZE=50G
          DATA_SIZE=40G
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        server_group: { get_attr: [server_groups, outputs, masters-servergroup] }
        cluster_security_groups:
          - { get_attr: [ security_groups, outputs, masters_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, masters_security_group ] }

  infra_nodes_deployment:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: node_group.yaml }
      parameters:
        node_type: worker
        node_flavor: ocp.t1.xxlarge
        key_name: { get_param: key_name }
        node_scale: { get_param: infra_scale }
        purpose_ident: infra
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        server_group: { get_attr: [server_groups, outputs, infra-servergroup] }
        cluster_security_groups:
          - { get_attr: [ security_groups, outputs, internet_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, infra_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, infra_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, internet_nodes_security_group ] }

  worker_small_nodes_deployment:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: node_group.yaml }
      parameters:
        node_type: worker
        node_flavor: ocp.t1.xxlarge
        key_name: { get_param: key_name }
        node_scale: { get_param: worker_small_scale }
        purpose_ident: tenant-s
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        server_group: { get_attr: [server_groups, outputs, nodes-servergroup] }
        cluster_security_groups:
          - { get_attr: [ security_groups, outputs, internet_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, internet_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, external_service_security_group ] }
          - { get_attr: [ security_groups, outputs, vrrp_nodes_security_group ] }

  worker_medium_nodes_deployment:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: node_group.yaml }
      parameters:
        node_type: worker
        node_flavor: ocp.m1.large
        key_name: { get_param: key_name }
        node_scale: { get_param: worker_medium_scale }
        purpose_ident: tenant-m
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        server_group: { get_attr: [server_groups, outputs, nodes-servergroup] }
        cluster_security_groups:
          - { get_attr: [ security_groups, outputs, internet_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, internet_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, external_service_security_group ] }
          - { get_attr: [ security_groups, outputs, vrrp_nodes_security_group ] }

  worker_large_nodes_deployment:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: node_group.yaml }
      parameters:
        node_type: worker
        node_flavor: ocp.r1.large
        key_name: { get_param: key_name }
        node_scale: { get_param: worker_large_scale }
        purpose_ident: tenant-l
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        server_group: { get_attr: [server_groups, outputs, nodes-servergroup] }
        cluster_security_groups:
          - { get_attr: [ security_groups, outputs, internet_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, all_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, internet_nodes_security_group ] }
          - { get_attr: [ security_groups, outputs, external_service_security_group ] }
          - { get_attr: [ security_groups, outputs, vrrp_nodes_security_group ] }

  data_plane_lb:
    type: OS::Heat::Stack
    depends_on: [ internal_network, security_groups, server_groups ]
    properties:
      template: { get_file: loadbalancers.yaml }
      parameters:
        haproxy_floating_ip: { get_param: dataplane_floating_ip }
        squid_vip: ""
        key_name: { get_param: key_name }
        scale: 2
        purpose_ident: www
        local_domain_suffix: { get_param: local_domain_suffix }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        server_group: { get_attr: [server_groups, outputs, loadbalancers-servergroup] }
        security_groups:
          - { get_attr: [ security_groups, outputs, internet_lb_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
          - { get_attr: [ security_groups, outputs, data_plane_security_group ] }
          - { get_attr: [ security_groups, outputs, monitoring_security_group ] }            
          - { get_attr: [ security_groups, outputs, vrrp_dataplane_security_group ] }

  bastion_deployment:
    type: OS::Heat::Stack
    depends_on: [ squid_vip, master_nodes_deployment, worker_small_nodes_deployment, worker_medium_nodes_deployment, worker_large_nodes_deployment ]
    properties:
      template: { get_file: bastion.yaml }
      parameters:
        time: { get_param: time }
        bastion_flavor: m1.small
        key_name: { get_param: key_name }
        domain_suffix: { get_param: domain_suffix }
        local_domain_suffix: { get_param: local_domain_suffix }
        openshift_openstack_username: { get_param: openshift_openstack_username }
        openshift_openstack_password: { get_param: openshift_openstack_password }
        os_auth_url: { get_param: os_auth_url }
        os_tenant_id: { get_param: os_tenant_id }
        os_tenant_name: { get_param: os_tenant_name }
        os_region: { get_param: os_region }
        os_domain_id: { get_param: os_domain_id }
        s3_bucket_name: { get_param: s3_bucket_name }
        openshift_version: { get_param: openshift_version }
        get_certificates: { get_param: get_certificates } 
        do_upgrades: { get_param: do_upgrades }
        internal_network: { get_attr: [internal_network, outputs, network] }
        internal_network_subnet: { get_attr: [internal_network, outputs, subnet] }
        internal_network_cidr: { get_param: [ network_config, cidr ] }
        bastion_fixed_ip: { get_param: [ network_config, bastion_ip ] }
        external_network: { get_param: external_network_cp }
        external_dns: { get_param: external_dns }
        server_security_groups: 
          - { get_attr: [ security_groups, outputs, bastion_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, all_internet_egress_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_external_security_group ] }
          - { get_attr: [ security_groups, outputs, bastion_internal_ssh_security_group ] }
        multinetwork: { get_param: multinetwork }
        deploy_extra_gateway: { get_param: deploy_extra_gateway }
        install_logging: { get_param: install_logging }
        logging_cluster_size: { get_param: logging_cluster_size }
        # details of the master stack:
        haproxy_vip: { get_attr: [ control_plane_lb, outputs, haproxy_internal_vip ] }
        squid_vip: { get_attr: [ squid_vip, outputs, squid_internal_vip ] }
        control_plane_lb: { get_attr: [ control_plane_lb, outputs, haproxy_list ] }
        master_details: { get_attr: [ master_nodes_deployment, outputs, node_list ] }
        # details of the internet facing node stack:
        internet_dp_vip: { get_attr: [ data_plane_lb, outputs, haproxy_internal_vip ] }
        internet_dp_lb: { get_attr: [ data_plane_lb, outputs, haproxy_list ] }
        internet_node_sml: { get_attr: [ worker_small_nodes_deployment, outputs, node_list ] }
        internet_node_med: { get_attr: [ worker_medium_nodes_deployment, outputs, node_list ] }
        internet_node_lge: { get_attr: [ worker_large_nodes_deployment, outputs, node_list ] } 
        infra_node_details: { get_attr: [ infra_nodes_deployment, outputs, node_list ] }
        set_node_routes: { get_param: set_node_routes }
        node_routes: { get_param: node_routes }
        sso_config: { get_param: sso_config }
        external_service_subnet: { get_param: [ network_config, service_subnet ] }
        registry_details: { get_param: registry_details }
        ansible_branch: { get_param: ansible_branch }
        controlplane_ip: { get_param: controlplane_ip }
        dataplane_ip: { get_param: dataplane_ip }
        neustar_ultradns_username: { get_param: neustar_ultradns_username }
        neustar_ultradns_password: { get_param: neustar_ultradns_password }
        slack_webhook_url_acme_sh: { get_param: slack_webhook_url_acme_sh }

conditions:
  multinetwork:
    get_param: multinetwork
  extra_gateway:
    get_param: deploy_extra_gateway
  external_service:
    not:
      equals:
      - get_param: external_services_config
      - ""

outputs:
  bastion_ip:
    description: External IP for connection to jump box.
    value: { get_attr: [ bastion_deployment, outputs, bastion_ip ] }
  external_service_floating_ips:
    condition: external_service
    description: External service floating IP and internal IP pairs
    value: { get_attr: [ external_services_infra, external_service_ip_pair ]}
  url:
    description: URL for control plane of cluster.
    value:
      str_replace:
        template: https://ocp.domain:8443
        params:
          domain: { get_param: domain_suffix }
#  internet_dataplane:
  internet_snat:
    description: egress IP for outbound connectivity on internet
    value: { get_attr: [ internal_network, outputs, gateway_snat ] }
  net2_dataplane:
    description: dataplane IP on net2 network
    value: { get_attr: [ net2_floating_ip, floating_ip_address ] }
    condition: multinetwork
  net2_gateway_snat:
    description: egress IP for outbound connectivity on net2 network
    value: { get_attr: [ net2_gateway, outputs, gateway_snat ] }
    condition: multinetwork
  extra_gateway_dataplane:
    description: dataplane IP on extra_gateway network
    value: { get_attr: [ extra_gateway_floating_ip, floating_ip_address ] }
    condition: extra_gateway
  extra_gateway_snat:
    description: egress IP for outbound connectivity on extra_gateway network
    value: { get_attr: [ extra_gateway, outputs, gateway_snat ] }
    condition: extra_gateway
  internal_subnet:
    description: subnet used for internal network
    value: { get_param: [ network_config, cidr ] }
  control_plane_whitelist:
    description: whitelisted addresses for control plane access
    value: { get_param: control_plane_allowed_sources }
  monitoring_whitelist:
    description: whitelisted addresses for monitoring access
    value: { get_param: monitoring_allowed_sources }
  data_plane_whitelist:
    description: whitelisted addresses for data plane access
    value: { get_param: data_plane_allowed_sources }
