- hosts: localhost
  vars:
    deploy_portworx_storage: "false"
  tasks:

#+create extra networks and outputs in network.yaml
#pass output from extra networks to all node stacks
#pass need for extra storage to all nodes stacks
#pass networks and storage to all nodes
#if node != infra
#  add networks to node
#  add storage to node

  - name: create portworx network file
    copy:
      src: ./network.yaml
      dest: ./network_pwx.yaml
    when: deploy_portworx_storage|bool

  - name: create portworx node_group file
    copy:
      src: ./node_group.yaml
      dest: ./node_group_pwx.yaml
    when: deploy_portworx_storage|bool

  - name: create portworx server_atomic file
    copy:
      src: ./server_atomic.yaml
      dest: ./server_atomic_pwx.yaml
    when: deploy_portworx_storage|bool

    #  - name: add top-level-template parameters
    #    blockinfile:
    #      dest: openshift.yaml
    #      backup: yes
    #      insertbefore: "resources:"
    #      marker: "  # ANSIBLE MANAGED BLOCK - add_portworx_networks_parameters"
    #      block: |2
    #          deploy_portworx_storage:
    #            type: boolean
    #            description: adds volumes and extra networks to non-infra nodes to facilitate portworx deployment
    #            default: false
    #when: deploy_portworx_storage|bool

  - name: add parameters to network stack
    blockinfile:
      dest: openshift.yaml
      backup: yes
      insertafter: "allocation_pools:"
      marker: "        # ANSIBLE MANAGED BLOCK - parameters for portworx deployment"
      block: |2
                # deploy portworx?
                deploy_storage_networks: { get_param: deploy_portworx_storage }
    when: deploy_portworx_storage|bool

  - name: specify pwx network template
    replace:
      path: openshift.yaml
      regexp: 'network.yaml'
      replace: 'network_pwx.yaml'
      backup: yes
    when: deploy_portworx_storage|bool

  - name: specify pwx node_group template
    replace:
      path: openshift.yaml
      regexp: 'node_group'
      replace: 'node_group_pwx'
      after: '  worker_small_nodes_deployment'
      backup: yes
    when: deploy_portworx_storage|bool

  - name: add storage networks parameters
    blockinfile:
      dest: openshift.yaml
      backup: yes
      insertafter: "purpose_ident: tenant-{{ item }}"
      marker: "        # ANSIBLE MANAGED BLOCK - add_portworx_networks_parameters - worker-{{ item }}"
      block: |2
                extra_volumes: { get_param: deploy_portworx_storage }
                storage_management_network: { get_attr: [internal_network, outputs, storage_management_network] }
                storage_data_network: { get_attr: [internal_network, outputs, storage_data_network] }
    loop: [ s, m, l ]
    when: deploy_portworx_storage|bool

  - name: add storage networks parameters Net2
    blockinfile:
      dest: openshift.yaml
      backup: yes
      insertafter: "purpose_ident: {{ purpose_ident }}-{{ item }}"
      marker: "        # ANSIBLE MANAGED BLOCK - add_portworx_networks_parameters Net2 - {{ purpose_ident }}-{{ item }}"
      block: |2
                extra_volumes: { get_param: deploy_portworx_storage }
                storage_management_network: { get_attr: [internal_network, outputs, storage_management_network] }
                storage_data_network: { get_attr: [internal_network, outputs, storage_data_network] }
    loop: [ s, m, l ]
    when: deploy_portworx_storage|bool and multinetwork|bool

  - name: specify pwx server_atomic template
    replace:
      path: node_group_pwx.yaml
      regexp: 'server_atomic.yaml'
      replace: 'server_atomic_pwx.yaml'
      backup: yes
    when: deploy_portworx_storage|bool

  - name: add storage networks parameters
    blockinfile:
      dest: network_pwx.yaml
      backup: yes
      insertbefore: "resources:"
      marker: "  # ANSIBLE MANAGED BLOCK - add_portworx_networks_parameters"
      block: |2
          deploy_storage_networks:
            type: boolean
            default: false
        
    when: deploy_portworx_storage|bool

  - name: add storage networks
    blockinfile:
      dest: network_pwx.yaml
      backup: yes
      insertbefore: "outputs:"
      marker: "  # ANSIBLE MANAGED BLOCK - add_portworx_networks_resources"
      block: |2
          storage_management_network:
            type: OS::Neutron::Net
            condition: deploy_storage_networks
            properties:
              admin_state_up: true
              name: storage_management_network
        
          storage_management_subnet:
            type: OS::Neutron::Subnet
            condition: deploy_storage_networks
            properties:
              name: storage_management_subnet
              network: { get_resource: storage_management_network }
              cidr: "10.254.253.0/24"
              ip_version: 4
              gateway_ip: ""
              dns_nameservers: []
        
          storage_data_network:
            type: OS::Neutron::Net
            condition: deploy_storage_networks
            properties:
              admin_state_up: true
              name: storage_data_network
        
          storage_data_subnet:
            type: OS::Neutron::Subnet
            condition: deploy_storage_networks
            properties:
              name: storage_data_subnet
              network: { get_resource: storage_data_network }
              cidr: "10.254.254.0/24"
              ip_version: 4
              gateway_ip: ""
              dns_nameservers: []
      
    when: deploy_portworx_storage|bool

  - name: add storage networks
    blockinfile:
      dest: network_pwx.yaml
      backup: yes
      insertbefore: "outputs:"
      marker: "# ANSIBLE MANAGED BLOCK - add_portworx_networks_conditions"
      block: |2
        conditions:
          deploy_storage_networks:
            get_param: deploy_storage_networks
      
    when: deploy_portworx_storage|bool

  - name: add storage networks outputs
    blockinfile:
      dest: network_pwx.yaml
      backup: yes
      insertafter: "outputs:"
      marker: "  # ANSIBLE MANAGED BLOCK - add_portwox_networks_outputs"
      block: |2
          storage_data_network: 
            value: { get_resource: storage_data_network }
            condition: deploy_storage_networks
          storage_management_network: 
            value: { get_resource: storage_management_network }
            condition: deploy_storage_networks
    when: deploy_portworx_storage|bool

  - name: node_group_parameters
    blockinfile:
      dest: node_group_pwx.yaml
      backup: yes
      insertbefore: "resources:"
      marker: "  # ANSIBLE MANAGED BLOCK - add parameters to node_group_pwx.yaml"
      block: |2
          extra_volumes:
            type: boolean
            description: Deploy extra volumes to non-infra nodes
            default: false
          storage_management_network:
            type: string
            description: Network for storage management traffic 
          storage_data_network:
            type: string
            description: Network for storage data traffic
        
    when: deploy_portworx_storage|bool

  - name: node_group_resources
    blockinfile:
      dest: node_group_pwx.yaml
      backup: yes
      insertafter: "server_group: { get_param: server_group }"
      marker: "          # ANSIBLE MANAGED BLOCK - add properties to node_group server resources"
      block: |2
                  extra_volumes: { get_param: extra_volumes }
                  storage_management_network: { get_param: storage_management_network }
                  storage_data_network: { get_param: storage_data_network }

    when: deploy_portworx_storage|bool

  - name: server_atomic parameters
    blockinfile:
      dest: server_atomic_pwx.yaml
      backup: yes
      insertbefore: "resources:"
      marker: "  # ANSIBLE MANAGED BLOCK - add parameters to server_atomic_pwx.yaml"
      block: |2
          extra_volumes:
            type: boolean
            description: Deploy extra volumes to non-infra nodes
            default: false
          storage_management_network:
            type: string
            description: Network for storage management traffic 
          storage_data_network:
            type: string
            description: Network for storage data traffic
        
    when: deploy_portworx_storage|bool

  - name: server_atomic resources
    blockinfile:
      dest: server_atomic_pwx.yaml
      backup: yes
      insertafter: "- port: { get_resource: port }"
      marker: "        # ANSIBLE MANAGED BLOCK - add properties to server_atomic resources"
      block: |2
                - network: { get_param: storage_management_network }
                - network: { get_param: storage_data_network }
    when: deploy_portworx_storage|bool

  - name: server_atomic storage resources
    blockinfile:
      dest: server_atomic_pwx.yaml
      backup: yes
      insertbefore: "outputs:"
      marker: "  # ANSIBLE MANAGED BLOCK - add properties to server_atomic resources"
      block: |2

          portworx_vol1:
            type: OS::Cinder::Volume
            condition: deploy_extra_volumes
            properties:
              description: Volume for data
              name:
                str_replace:
                  template: vol_data_servername_1
                  params:
                    servername: { get_param: server_name }
              size: 100
              volume_type: TIER2
        
          vol_attachment_vol1:
            type: OS::Cinder::VolumeAttachment
            depends_on: [ server, portworx_vol1 ]
            condition: deploy_extra_volumes
            properties:
              instance_uuid: { get_resource: server }
              mountpoint: /dev/vdc
              volume_id: { get_resource: portworx_vol1 }
    when: deploy_portworx_storage|bool

  - name: server_atomic storage resources
    blockinfile:
      dest: server_atomic_pwx.yaml
      backup: yes
      insertbefore: "outputs:"
      marker: "# ANSIBLE MANAGED BLOCK - add properties to server_atomic conditions"
      block: |2
        conditions:
          not_infra:
            not:
              equals:
              - get_param: purpose_ident
              - infra
          deploy_volumes:
            equals:
            - get_param: extra_volumes
            - true
          deploy_extra_volumes:
            and:
            - not_infra
            - deploy_volumes

    when: deploy_portworx_storage|bool

