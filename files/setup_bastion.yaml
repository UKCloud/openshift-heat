---
- hosts: localhost
  vars:
    time: __time__
    haproxy_vip: __haproxy_vip__
    squid_vip: __squid_vip__
    controlPlaneLb: __control_plane_lb__
    masterNodes: __master_details__
    internetDpVip: __internet_dp_vip__
    internetDpLb:  __internet_dp_lb__
    internetNodesSml: __internet_node_sml__
    internetNodesMed: __internet_node_med__
    internetNodesLge: __internet_node_lge__
    infraNodes: __infra_node_details__
    domainSuffix: __domain_suffix__
    localDomainSuffix: __local_domain_suffix__
    openstackOpenshiftPassword: __openshift_openstack_password__
    openstackOpenshiftUsername: __openshift_openstack_username__
    osAuthUrl: __openstack_auth_url__
    osTenantId: __openstack_tenant_id__
    osTenantName: __openstack_tenant_name__
    osRegion: __openstack_region__
    osDomainID: __openstack_domain_id__
    s3accesskey: __s3accesskey__
    s3secretkey: __s3secretkey__
    s3regionendpoint: __s3regionendpoint__
    s3bucketname: __s3bucketname__
    openshiftVersion: "__openshiftVersion__"
    getCertificates: __getCertificates__
    stagingCerts: __stagingCerts__
    doUpgrades: __doUpgrades__
    installLogging: __installLogging__
    loggingClusterSize: __loggingClusterSize__
    ocpBranding: __ocp_branding__
    ocpBrandingUrl: "__ocp_branding_url__"
    multinetwork: __multinetwork__
    deploy_portworx_storage: __deploy_portworx_storage__
    deployExtraGateway: __deploy_extra_gateway__
    externalDns: __external_dns__
    setNodeRoutes: __set_node_routes__
    nodeRoutes: __node_routes__
    internalNetworkCidr: __internal_network_cidr__
    bastionIp: __bastion_ip__
    net2NTPServers: __net2_ntp_servers__
    net2DnsServer: __net2_dns_server__
    net2DpVip: __net2_dp_vip__
    net2DpLb: __net2_dp_lb__
    net2NodesSml: __net2_node_sml__
    net2NodesMed: __net2_node_med__
    net2NodesLge: __net2_node_lge__
    net2Gateway: __net2_gateway__
    net2NodeRoutes: __net2_node_routes__
    net2Routes: __net2_routes__
    extraGateway: __extra_gateway__
    extraGatewayVip: __extra_gateway_dataplane_vip__
    ssoClientId: __sso_client_id__
    ssoClientSecret: __sso_client_secret__
    ssoUrls: __sso_urls__
    externalServiceSubnet: __external_service_subnet__
    registryUrl: __registry_url__
    registryUser: __registry_user__
    registryPassword: __registry_password__
    ansibleBranch: __ansible_branch__
    controlplaneIp: __controlplane_ip__
    dataplaneIp: __dataplane_ip__
    neustarUltraDnsUsername: __neustar_ultradns_username__
    neustarUltraDnsPassword: __neustar_ultradns_password__
    slackWebhookUrlAcmeSh: __slack_webhook_url_acme_sh__
    ansibleVaultPassword: __ansible_vault_password__
    internetGatewayIp: __internet_gateway_ip__
    zabbixAgents: __zabbix_agents__

  tasks:
    - name: Check if stack update or create and register variable
      shell: if [[ $(openstack stack show "openshift-{{ osTenantName }}" -f value -c stack_status \
                --os-auth-url "{{ osAuthUrl }}" \
                --os-username "{{ openstackOpenshiftUsername }}" \
                --os-project-name "{{ osTenantName }}" \
                --os-password "{{ openstackOpenshiftPassword }}") = *UPDATE* ]] ; then echo False ; else echo True ; fi
      register: stack_status

    - set_fact: 
        stack_create: "{{ stack_status.stdout }}"

    - set_fact:
        net2NodeRoutes: "{{ net2NodeRoutes + [ { 'gateway': internetGatewayIp, 'route': controlplaneIp + '/32' } ] }}"
      when: multinetwork

    - name: temporarily add host entries before we setup proper DNS
      blockinfile:
        dest: /tmp/hosts.j2
        create: yes
        block: |
          127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
          ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
          {% for item in masterNodes %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in internetNodesSml %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in internetNodesMed %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in internetNodesLge %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in infraNodes %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% if multinetwork %}
          {% for item in net2NodesSml %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in net2NodesMed %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in net2NodesLge %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% endif %}
          {% for item in controlPlaneLb %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% for item in internetDpLb %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% if multinetwork %}
          {% for item in net2DpLb %}
          {{ item|replace('\"', "") }}
          {% endfor %}
          {% endif %}
          {{ haproxy_vip }} console.{{ domainSuffix }}
          {{ haproxy_vip }} ocp.{{ domainSuffix }}

    - name: update hosts file
      template: src=/tmp/hosts.j2 dest=/etc/hosts
      when: stack_create

    - name: disable TTY for sudo on bastion
      lineinfile:
        path: /etc/sudoers
        regexp: '^Defaults.*requiretty$'
        line: '#Defaults    requiretty'
        backup: yes
      become: yes
      become_method: sudo

    - name: create ansible variables template
      blockinfile:
        dest: /tmp/ansible_vars.j2
        create: yes
        block: |
          master_details:
          {% for item in masterNodes %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          worker_details:
          {% for item in infraNodes %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in internetNodesSml %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in internetNodesMed %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in internetNodesLge %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% if multinetwork %}
          {% for item in net2NodesSml %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in net2NodesMed %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in net2NodesLge %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% endif %}
          infrastructure_node_details:
          {% for item in infraNodes %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          worker_details_internet:
          {% for item in internetNodesSml %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in internetNodesMed %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in internetNodesLge %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          worker_details_net2:
          {% if multinetwork %}
          {% for item in net2NodesSml %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in net2NodesMed %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% for item in net2NodesLge %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% endif %}
          control_plane_details:
          {% for item in controlPlaneLb %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          data_plane_details:
          {% for item in internetDpLb %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% if multinetwork %}
          {% for item in net2DpLb %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% endif %}
          data_plane_internet:
          {% for item in internetDpLb %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          data_plane_net2:
          {% if multinetwork %}
          {% for item in net2DpLb %}
            {{ item|replace(' ', ': ') }}
          {% endfor %}
          {% endif %}
          haproxy_vip: {{ haproxy_vip }}
          squid_vip: {{ squid_vip }}
          internet_vip: {{ internetDpVip }}
          domainSuffix: {{ domainSuffix }}
          openstackOpenshiftPassword: {{ openstackOpenshiftPassword }}
          openstackOpenshiftUsername: {{ openstackOpenshiftUsername }}
          osAuthUrl: {{ osAuthUrl }}
          osTenantId: {{ osTenantId }}
          osTenantName: {{ osTenantName }}
          osRegion: {{ osRegion }}
          osDomainID: {{ osDomainID }}
          s3accesskey: {{ s3accesskey }}
          s3secretkey: {{ s3secretkey  }} 
          s3regionendpoint: {{ s3regionendpoint }}
          s3bucketname: {{ s3bucketname }}
          localDomainSuffix: {{ localDomainSuffix }}
          openshiftVersion: "{{ openshiftVersion }}"
          getCertificates: {{ getCertificates }}
          stagingCerts: {{ stagingCerts }}
          doUpgrades: {{ doUpgrades }}
          installLogging: {{ installLogging }}
          loggingClusterSize: {{ loggingClusterSize }}
          ocpBranding: {{ ocpBranding }}
          ocpBrandingUrl: {{ ocpBrandingUrl }}
          multinetwork: {{ multinetwork }}
          deploy_portworx_storage: {{ deploy_portworx_storage }}
          external_dns:
          {% for item in externalDns %}
            - {{ item }}
          {% endfor %}
          set_node_routes: {{ setNodeRoutes }}
          node_routes: {{ nodeRoutes | to_json }}
          internalNetworkCidr: {{ internalNetworkCidr }}
          bastion_ip: {{ bastionIp }}
          controlplane_ip: {{ controlplaneIp }}
          dataplane_ip: {{ dataplaneIp }}
          {% if multinetwork %}
          net2_routes: {{ net2Routes | to_json }}
          net2_ntp_servers: {{ net2NTPServers | to_json }}
          net2_dns_server:
          {% for item in net2DnsServer %}
            - {{ item }}
          {% endfor %}
          net2_vip: {{ net2DpVip }}
          net2_gateway: {{ net2Gateway }}
          net2_node_routes: {{ net2NodeRoutes | to_json }}
          {% endif %}
          {% if deployExtraGateway %}
          extra_gateway: {{ extraGateway }}
          extra_gateway_vip: {{ extraGatewayVip }}
          {% endif %}
          sso_client_id: {{ ssoClientId }}
          sso_client_secret: {{ ssoClientSecret }}
          sso_urls: '{{ ssoUrls | to_json }}'
          external_service_subnet: {{ externalServiceSubnet }}
          registryUrl: {{ registryUrl }}
          registryUser: {{ registryUser }}
          registryPassword: {{ registryPassword }}
          neustarUltraDnsUsername: {{ neustarUltraDnsUsername }}
          neustarUltraDnsPassword: {{ neustarUltraDnsPassword }}
          slackWebhookUrlAcmeSh: {{ slackWebhookUrlAcmeSh }}
          zabbixAgents: {{ zabbixAgents }}
    
    - name: Create Ansible vault password file
      copy:
        content: "{{ ansibleVaultPassword }}"
        dest: /home/cloud-user/ansible-vault-password

    - name: create ansible variables directory
      file:
        path: /etc/ansible/group_vars/
        state: directory

    - name: create ansible variables file
      file:
        path: /etc/ansible/group_vars/all.yml
        state: touch

    - name: place ansible vars file
      template: src=/tmp/ansible_vars.j2 dest=/etc/ansible/group_vars/all.yml

    # Change the branch name by changing 'version', below
    - name: Pull UKCloud openshift code
      git:
        repo: 'https://github.com/UKCloud/openshift-deployment-ansible.git'
        dest: /usr/share/ansible/openshift-deployment-ansible
        version: "{{ ansibleBranch }}"
      when: stack_create

    - name: Create variables symlink
      file:
        src: /etc/ansible/group_vars
        dest: /usr/share/ansible/openshift-deployment-ansible/group_vars
        owner: cloud-user
        group: cloud-user
        state: link
      when: stack_create

    - name: Update repo permissions
      file:
        path: /usr/share/ansible/openshift-deployment-ansible
        owner: cloud-user
        group: cloud-user
        recurse: yes
      when: stack_create 
