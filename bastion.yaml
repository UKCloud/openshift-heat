heat_template_version: 2016-04-08

parameters:
  time:
    type: string
    description: epoch time used to cause ansible to run on every update
  bastion_flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  key_name:
    type: string
    description: SSH Key Pair
    default: "venv-mac"
    constraints:
      - custom_constraint: nova.keypair
  rhn_orgid:
    type: string
    label: rhn activation org
    description: Name of the rhn activation org
  rhn_activationkey:
    type: string
    label: RHN activation key
    description: rhn activation key
    hidden: true
  domain_suffix:
    type: string
    description: domain suffix for OpenShift
    default: customer1.openshift.ukcloud.com
  local_domain_suffix:
    type: string
    description: domain suffix for local DNS for OpenShift
    default: openstacklocal
  openshift_openstack_username:
    type: string
    description: OpenShift username for cinder integration
  openshift_openstack_password:
    type: string
    description: OpenShift password for cinder integration
    hidden: true
  os_auth_url:
    type: string
    description: OpenStack auth URL
  os_tenant_id:
    type: string
    description: OpenStack tenant ID
  os_tenant_name:
    type: string
    description: OpenStack tenant name
  os_region:
    type: string
    description: OpenStack Region
  s3_access_key:
    type: string
    description: s3 access key for registry backend
  s3_secret_key:
    type: string
    description: s3 secret key for registry backend 
  s3_region_endpoint:
    type: string
    description: s3 region end point for registry backend
  s3_bucket_name:
    type: string
    description: s3 bucket for registry backend - must exist
  openshift_version:
    type: string
    description: OpenShift version to deploy
    default: 3.7
  get_certificates:
    type: boolean
    description: download certificates with certbot during install
    default: false
  do_upgrades:
    type: boolean
    description: Whether to perform OS package upgrades as part of Ansible deployment
    default: true
  internal_network:
    type: string
    description: network on which to deploy the cluster
  internal_network_subnet:
    type: string
    description: subnet of network to attach to
  bastion_fixed_ip:
    type: string
    description: fixed IP of the bastion in this stack

  install_logging:
    type: boolean
    description: Whether to deploy the aggregated logging stack into the environment
    default: false
  logging_cluster_size:
    type: number
    description: Size of the ES cluster to deploy if logging deployed with install_logging
    default: 1
  haproxy_vip:
    type: string
    description: internal fixed IP of the haproxy vip serving cluster api
  control_plane_lb:
    type: comma_delimited_list
    description: Details of the control plane haproxy nodes
  master_details:
    type: comma_delimited_list
    description: Details of the deployed master nodes in the cluster
  internet_dp_vip:
    type: string
    description: internal fixed IP of the haproxy vip serving internet traffic
  internet_dp_lb:
    type: comma_delimited_list
    description: Details of the data plane haproxy nodes for internet
  internet_node_details:
    type: comma_delimited_list
    description: Details of the deployed internet nodes in the cluster
  net-2_dp_vip:
    type: string
    description: internal fixed IP of the haproxy vip serving net-2 traffic
  net-2_dp_lb:
    type: comma_delimited_list
    description: Details of the data plane haproxy nodes for net-2
  net-2_node_details:
    type: comma_delimited_list
    description: Details of the deployed net-2 nodes in the cluster

resources:
  name_nonce:
    type: OS::Heat::RandomString
    properties:
      length: 4
      sequence: lowercase

  bastion_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: internal_network }
      fixed_ips: [{ subnet: { get_param: internal_network_subnet  }, ip_address: { get_param: bastion_fixed_ip } }]
      security_groups:
        - { get_resource: cluster_secgroup }
        - { get_resource: ssh_secgroup }

  bastion_floating_ip:
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: "Internet"

  bastion_floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: bastion_floating_ip }
      port_id: { get_resource: bastion_port }

  cluster_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - direction: egress
          ethertype: IPv4
        - direction: egress
          ethertype: IPv6
        - protocol: tcp
          direction: ingress
          ethertype: IPv4
          remote_mode: remote_group_id
        - protocol: tcp
          direction: ingress
          ethertype: IPv6
          remote_mode: remote_group_id

  ssh_secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
          port_range_min: 22
          port_range_max: 22

  install_config_agent_yum:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: 
        str_replace:
          params:
            __rhn_orgid__: { get_param: rhn_orgid }
            __rhn_activationkey__: { get_param: rhn_activationkey }
            __openshift_version__: { get_param: openshift_version }
          template: {get_file: files/install_config_agent_yum.sh}

  configure_config_agent:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        get_file: files/configure_config_agent.sh

  start_config_agent:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: files/start_config_agent.sh}

  install_config_agent:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: install_config_agent_yum}
      - config: {get_resource: configure_config_agent}
      - config: {get_resource: start_config_agent}

  bastion_host:
    type: OS::Nova::Server
    depends_on: [ bastion_port ]
    properties:
      name: 
        str_replace:
          template: bastion_host.suffix
          params:
            suffix: { get_param: local_domain_suffix }
      flavor: { get_param: bastion_flavor }
      image: "rhel-7-LTS" 
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: bastion_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: install_config_agent }

  setup_host_file:
    type: OS::Heat::SoftwareConfig
    depends_on: [ bastion_host ]
    properties:
      group: ansible
      config:
        str_replace:
          params:
            __haproxy_vip__: { get_param: [ haproxy_vip ] }
            __control_plane_lb__: { get_param: [ control_plane_lb ] }
            __master_details__: { get_param: [ master_details ] }
            __internet_dp_vip__: { get_param: [ internet_dp_vip ] }
            __internet_dp_lb__: { get_param: [ internet_dp_lb ] }
            __internet_node_details__: { get_param: [ internet_node_details ] }
            __net-2_dp_vip__: { get_param: [ net-2_dp_vip ] }
            __net-2_dp_lb__: { get_param: [ net-2_dp_lb ] }
            __net-2_node_details__: { get_param: [ net-2_node_details ] }
            __time__: { get_param: time }
            __domain_suffix__: { get_param: domain_suffix }
            __openshift_openstack_username__: { get_param: openshift_openstack_username }
            __openshift_openstack_password__: { get_param: openshift_openstack_password }
            __openstack_auth_url__: { get_param: os_auth_url }
            __openstack_tenant_id__: { get_param: os_tenant_id }
            __openstack_tenant_name__: { get_param: os_tenant_name }
            __openstack_region__: { get_param: os_region }
            __s3accesskey__: { get_param: s3_access_key }
            __s3secretkey__: { get_param: s3_secret_key }
            __s3regionendpoint__: { get_param: s3_region_endpoint  }
            __s3bucketname__: { get_param: s3_bucket_name }
            __local_domain_suffix__: { get_param: local_domain_suffix }
            __openshiftVersion__: { get_param: openshift_version }
            __getCertificates__: { get_param: get_certificates }
            __doUpgrades__: { get_param: do_upgrades }
            __installLogging__: { get_param: install_logging }
            __loggingClusterSize__: { get_param: logging_cluster_size }
          template: { get_file: 'files/setup_bastion.yaml' }
      outputs:
      - name: result

  deployment_host_file:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: CFN_SIGNAL
      config: 
        get_resource: setup_host_file
      server:
        get_resource: bastion_host

outputs:
  bastion_ip:
    description: External IP for connection to jump box.
    value: { get_attr: [  bastion_floating_ip, floating_ip_address ] }
  haproxy_external_ip:
    description: External IP for haproxy..
    value: { get_param: haproxy_floating_ip }
  host_file:
    description: host file contents
    value: 
      list_join: [ ', ',  { get_param: [ worker_details ] }, { get_param: [ master_details ] } ]
